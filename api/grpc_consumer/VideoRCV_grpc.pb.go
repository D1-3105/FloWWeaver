// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: VideoRCV.proto

package grpc_consumer

import (
	context "context"
	base_rpc "go_video_streamer/internal/base_rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoRCV_StreamFrames_FullMethodName = "/grpc_consumer.VideoRCV/StreamFrames"
	VideoRCV_AddStream_FullMethodName    = "/grpc_consumer.VideoRCV/AddStream"
	VideoRCV_RMStream_FullMethodName     = "/grpc_consumer.VideoRCV/RMStream"
)

// VideoRCVClient is the client API for VideoRCV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoRCVClient interface {
	StreamFrames(ctx context.Context, in *NamedFrame, opts ...grpc.CallOption) (*VideoStreamResponse, error)
	AddStream(ctx context.Context, in *base_rpc.NewStream, opts ...grpc.CallOption) (*EditStreamOperationResponse, error)
	RMStream(ctx context.Context, in *base_rpc.RemoveStream, opts ...grpc.CallOption) (*EditStreamOperationResponse, error)
}

type videoRCVClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoRCVClient(cc grpc.ClientConnInterface) VideoRCVClient {
	return &videoRCVClient{cc}
}

func (c *videoRCVClient) StreamFrames(ctx context.Context, in *NamedFrame, opts ...grpc.CallOption) (*VideoStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoStreamResponse)
	err := c.cc.Invoke(ctx, VideoRCV_StreamFrames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoRCVClient) AddStream(ctx context.Context, in *base_rpc.NewStream, opts ...grpc.CallOption) (*EditStreamOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditStreamOperationResponse)
	err := c.cc.Invoke(ctx, VideoRCV_AddStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoRCVClient) RMStream(ctx context.Context, in *base_rpc.RemoveStream, opts ...grpc.CallOption) (*EditStreamOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditStreamOperationResponse)
	err := c.cc.Invoke(ctx, VideoRCV_RMStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoRCVServer is the server API for VideoRCV service.
// All implementations must embed UnimplementedVideoRCVServer
// for forward compatibility.
type VideoRCVServer interface {
	StreamFrames(context.Context, *NamedFrame) (*VideoStreamResponse, error)
	AddStream(context.Context, *base_rpc.NewStream) (*EditStreamOperationResponse, error)
	RMStream(context.Context, *base_rpc.RemoveStream) (*EditStreamOperationResponse, error)
	mustEmbedUnimplementedVideoRCVServer()
}

// UnimplementedVideoRCVServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoRCVServer struct{}

func (UnimplementedVideoRCVServer) StreamFrames(context.Context, *NamedFrame) (*VideoStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamFrames not implemented")
}
func (UnimplementedVideoRCVServer) AddStream(context.Context, *base_rpc.NewStream) (*EditStreamOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStream not implemented")
}
func (UnimplementedVideoRCVServer) RMStream(context.Context, *base_rpc.RemoveStream) (*EditStreamOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RMStream not implemented")
}
func (UnimplementedVideoRCVServer) mustEmbedUnimplementedVideoRCVServer() {}
func (UnimplementedVideoRCVServer) testEmbeddedByValue()                  {}

// UnsafeVideoRCVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoRCVServer will
// result in compilation errors.
type UnsafeVideoRCVServer interface {
	mustEmbedUnimplementedVideoRCVServer()
}

func RegisterVideoRCVServer(s grpc.ServiceRegistrar, srv VideoRCVServer) {
	// If the following call pancis, it indicates UnimplementedVideoRCVServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoRCV_ServiceDesc, srv)
}

func _VideoRCV_StreamFrames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamedFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRCVServer).StreamFrames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoRCV_StreamFrames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRCVServer).StreamFrames(ctx, req.(*NamedFrame))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoRCV_AddStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base_rpc.NewStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRCVServer).AddStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoRCV_AddStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRCVServer).AddStream(ctx, req.(*base_rpc.NewStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoRCV_RMStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base_rpc.RemoveStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRCVServer).RMStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoRCV_RMStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRCVServer).RMStream(ctx, req.(*base_rpc.RemoveStream))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoRCV_ServiceDesc is the grpc.ServiceDesc for VideoRCV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoRCV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_consumer.VideoRCV",
	HandlerType: (*VideoRCVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StreamFrames",
			Handler:    _VideoRCV_StreamFrames_Handler,
		},
		{
			MethodName: "AddStream",
			Handler:    _VideoRCV_AddStream_Handler,
		},
		{
			MethodName: "RMStream",
			Handler:    _VideoRCV_RMStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "VideoRCV.proto",
}
